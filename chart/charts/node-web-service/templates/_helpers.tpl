{{- define "node-web-service.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.
*/}}
{{- define "node-web-service.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := default .Chart.Name .Values.nameOverride }}
{{- if contains $name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "node-web-service.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Common labels
*/}}
{{- define "node-web-service.labels" -}}
helm.sh/chart: {{ include "node-web-service.chart" . }}
{{ include "node-web-service.selectorLabels" . }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}

{{/*
Selector labels
*/}}
{{- define "node-web-service.selectorLabels" -}}
app.kubernetes.io/name: {{ include "node-web-service.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{/*
One place to define service account names. We call to a helper chart for the
GSA because there are some strict length rules.
*/}}
{{- define "node-web-service.gsaName" -}}
{{ include "cloud-helper.gcp.safeGSAName" .Release.Name }}
{{- end }}
{{- define "node-web-service.ksaName" -}}
{{ .Release.Name }}
{{- end }}

{{/* 
TODO You need to audit the helm-labels helper. The ones above were generated by
Helm 3 and are likely what we should go with moving forward. As the comments
suggest, that helper is a mix of old and new recommendations. It is possible I
use some of the old labels in G5 CLI, though hopefully not. If I do, change the
CLI.
*/}}
{{- define "helm-labels" -}}
# useful for kubectl filtering, and istio prefers this
app: {{ .Release.Name }}
# this is the Kubernetes recommended label name
# https://helm.sh/docs/chart_best_practices/#standard-labels
app.kubernetes.io/name: {{ .Release.Name }}
helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
app.kubernetes.io/instance: {{ .Release.Name }}
# while Helm recommends the labels above, some Helm-compatible tooling (like
# Codefresh release boards) still want these labels
chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
heritage:  {{ .Release.Service }}
release: {{ .Release.Name }}
{{- end -}}

{{- define "validate-configuration" }}
{{- if not .Values.configuration }}
{{ fail "a configuration is required!" }}
{{- end }}
{{- if not (hasKey .Values.configurations .Values.configuration) }}
{{ fail (printf "%s is not a defined configuration in %v" .Values.configuration (keys .Values.configurations)) }}
{{- end }}
{{- end }}

{{- define "common-vars" -}}
{{- include "validate-configuration" $ }}
{{- $configuration := index $.Values.configurations $.Values.configuration -}}

- name: APP_KUBERNETES_IO_COMPONENT
  valueFrom:
    fieldRef:
      fieldPath: metadata.labels['app.kubernetes.io/component']

- name: GCP_PROJECT_ID
  valueFrom:
    configMapKeyRef:
      name: environment-info
      key: project_id

{{/* These two should be identical to each other, but you never know */}}
- name: HELM_RELEASE_NAME
  value: {{ $.Release.Name | quote }}
- name: G5_APPLICATION_NAME
  value: {{ include "cloud-helper.values.applicationName" $ }}

{{- range $name, $properties := $.Values.topics }}
{{/* Topics are the only Pub/Sub resource we access that are in other projects.
Topics in other projects are the only time we need to set this var. The
g5_pub_sub gem will use GCP_PROJECT_ID when this variable is not set, which is
what we want for in-project Topics.*/}}
{{- with $properties.associatedProject }}
- name: TOPIC_{{ include "cloud-helper.activesupport.constantize" $name }}_PROJECT_ID
  value: {{ include "cloud-helper.values.associatedProject" (list $ .) }}
{{- end }}
{{- end }}

{{ if $.Values.isInternetFacing -}}
  {{- $defaultPublicHostname := printf "%s-%s.g5devops.com" .Release.Name $.Values.environment -}}
  {{- if eq $.Values.configuration "production" -}}
    {{- $defaultPublicHostname = printf "%s.g5marketingcloud.com" .Release.Name -}}
  {{- end }}

- name: INTERNET_FACING_HOSTNAME
  value: {{ $configuration.publicHostname | default $defaultPublicHostname | quote }}
{{- end }}

{{ if $.Values.database.enabled }}
- name: DATABASE_HOST
  valueFrom:
    configMapKeyRef:
      name: {{ include "cloudsql.hostConfigMapName" (list (include "cloud-helper.values.applicationName" $) (get .Values .Values.activeCloudSQLSubchart)) }}
      key: {{ include "cloudsql.hostConfigMapKey" . }}
- name: DATABASE_NAME
  value: {{ include "cloudsql.databaseName" (list (include "cloud-helper.values.applicationName" $) (get .Values .Values.activeCloudSQLSubchart)) }}
- name: DATABASE_USER
  value: {{ include "cloudsql.userName" (list (include "cloud-helper.values.applicationName" $) (get .Values .Values.activeCloudSQLSubchart)) }}
- name: DATABASE_PASSWORD
  valueFrom:
    secretKeyRef:
      name: {{ include "cloudsql.passwordSecretName" (list (include "cloud-helper.values.applicationName" $) (get .Values .Values.activeCloudSQLSubchart)) }}
      key: {{ include "cloudsql.passwordSecretKey" . }}
{{ end }}

{{ if $.Values.cache.enabled }}
- name: REDIS_URL
  valueFrom:
    configMapKeyRef:
      name: {{ include "redis.urlConfigMapName" (list (include "cloud-helper.values.applicationName" $) (get .Values .Values.activeCacheSubchart)) }}
      key: {{ include "redis.urlConfigMapKey" . }}
{{ end }}

{{ if .Values.logLevel }}
- name: LOG_LEVEL
  value: "{{ .Values.logLevel }}"
{{ end }}

{{ if $configuration.hubURL }}
- name: HUB_URL
  value: "{{ $configuration.hubURL }}"
{{ end }}

{{ if .Values.features }}

{{ if or (has "g5-auth-oauth-app" .Values.features) (has "g5-auth-service-to-service-client" .Values.features) }}
- name: G5_AUTH_ENDPOINT
  value: {{ $configuration.g5AuthEndpoint | default "https://auth.g5search.com" }}
{{ end }}

{{ if has "g5-auth-oauth-app" .Values.features }}
- name: G5_AUTH_CLIENT_ID
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}
      key: g5-auth-client-id
- name: G5_AUTH_CLIENT_SECRET
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}
      key: g5-auth-client-secret
- name: G5_AUTH_REDIRECT_URI
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}
      key: g5-auth-redirect-uri
{{ if not .Values.auth0.client.create }}
{{- /*
If Auth0 and G5 Auth are both enabled (which is happening during the Auth0
migration), having SECRET_KEY_BASE defined twice is causing Helm env merge
issues.
*/}}
- name: SECRET_KEY_BASE
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}
      key: secret-key-base
{{ end }}
{{ end }}

{{ if has "g5-auth-service-to-service-client" .Values.features }}
- name: G5_AUTH_ALLOW_PASSWORDS_CREDENTIALS
  value: "true"
- name: G5_AUTH_USERNAME
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}
      key: g5-auth-username
- name: G5_AUTH_PASSWORD
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}
      key: g5-auth-password
{{ end }}

{{ if .Values.honeybadgerAPIKey }}
- name: HONEYBADGER_API_KEY
  value: {{ .Values.honeybadgerAPIKey | quote }}
- name: HONEYBADGER_ENVIRONMENT
  valueFrom:
    configMapKeyRef:
      name: environment-info
      key: project_name
{{ end }}
{{ end }}

{{ if or .Values.auth0.client.create .Values.auth0.resourceServer.create }}
- name: AUTH0_AUDIENCE
  value: {{ .Release.Name }}
{{ end }}

{{ if .Values.auth0.client.create }}
- name: AUTH0_DOMAIN
  valueFrom:
    configMapKeyRef:
      name: environment-info
      key: auth0_tenant_domain
- name: AUTH0_CALLBACK_URL
  value: https://$(INTERNET_FACING_HOSTNAME)/users/auth/auth0/callback
- name: AUTH0_CLIENT_ID
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}-auth0-client
      key: client-id
- name: AUTH0_CLIENT_SECRET
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}-auth0-client
      key: client-secret
- name: SECRET_KEY_BASE
  valueFrom:
    secretKeyRef:
      name: {{ .Release.Name }}-auth0-client
      key: cookie-secret
{{ end }}


{{ if has "scout" .Values.features }}
- name: SCOUT_MONITOR
  value: "true"
- name: SCOUT_KEY
  valueFrom:
    secretKeyRef:
      name: scout
      key: key
- name: SCOUT_NAME
  value: "{{ .Values.scoutAppName | default (title .Release.Name) }} ({{ .Values.environment }})"
- name: SCOUT_LOG_LEVEL
  value: "warn"
- name: SCOUT_LOG_FILE_PATH
  value: "STDOUT"
- name: SCOUT_IGNORE
  # This needs to be a valid JSON array
  value: '["/okcomputer"]'
{{- end -}}
{{- end -}}

{{- define "volume-mounts" -}}
{{ if $.Values.volumes.volumeMounts }}
{{ toYaml $.Values.volumes.volumeMounts }}
{{- end }}
{{- end }}

{{- define "volumes" -}}
{{ if $.Values.volumes.volumes }}
{{ toYaml $.Values.volumes.volumes }}
{{- end }}
{{- end }}

{{- define "reloader-annotation" -}}
reloader.stakater.com/search: "true"
{{- end }}

{{- define "publicHostname" }}
{{- include "validate-configuration" . }}
{{- $configuration := index .Values.configurations .Values.configuration -}}
{{- $defaultPublicHostname := printf "%s-%s.g5devops.com" .Release.Name .Values.environment -}}
{{- if eq .Values.configuration "production" -}}
  {{- $defaultPublicHostname = printf "%s.g5marketingcloud.com" .Release.Name -}}
{{- end }}
{{- $configuration.publicHostname | default $defaultPublicHostname -}}
{{ end }}
